AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Easy serverless Amazon Trascribe
Parameters:
  MediaBucketIdentifier:
    Type: String
  StackResourcesBucket:
    Type: String
  StackResourcesPrefix:
    Type: String
  BasicAuthUsername:
    Type: String
  BasicAuthPassword:
    Type: String
  NotificationSourceEmailAddress:
    Type: String
  # S3 Object Verion Parameters
  TranscriptionJobStartFunctionS3ObjectVersion:
    Type: String
  WebsiteApiFunctionS3ObjectVersion:
    Type: String
  StaticWebsiteFunctionS3ObjectVersion:
    Type: String
  StaticWebsiteAuthorizerFunctionS3ObjectVersion:
    Type: String
  TranscriptionJobStateChangeFunctionS3ObjectVersion:
    Type: String
Resources:
  TranscriptionsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled
      Tags:
        - Key: Project
          Value: serverless-transcribe
  MediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-${MediaBucketIdentifier}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "POST"
            AllowedOrigins:
              - "*"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mp3
            Function: !GetAtt TranscriptionJobStartFunction.Arn
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mp4
            Function: !GetAtt TranscriptionJobStartFunction.Arn
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .m4a
            Function: !GetAtt TranscriptionJobStartFunction.Arn
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .wav
            Function: !GetAtt TranscriptionJobStartFunction.Arn
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .flac
            Function: !GetAtt TranscriptionJobStartFunction.Arn
      Tags:
        - Key: Project
          Value: serverless-transcribe
  MediaBucketAccessIamUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: MediaBucketUploadSigningPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-${MediaBucketIdentifier}"
                  - !Sub "arn:aws:s3:::${AWS::StackName}-${MediaBucketIdentifier}/*"
  MediaBucketAccessIamUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref MediaBucketAccessIamUser
  # Transcription Job Start
  TranscriptionJobStartFunctionMediaBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TranscriptionJobStartFunction.Arn
      Principal: s3.amazonaws.com
      # SourceArn: !GetAtt MediaBucket.Arn
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-${MediaBucketIdentifier}"
  TranscriptionJobStartFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub "${StackResourcesPrefix}/lambdas/TranscriptionJobStartFunction.zip"
        S3ObjectVersion: !Ref TranscriptionJobStartFunctionS3ObjectVersion
      Description: >
        Starts transcription jobs when triggered by S3 events
      Environment:
        Variables:
          NOTIFICATION_SOURCE_EMAIL_ADDRESS: !Ref NotificationSourceEmailAddress
          TRANSCRIPTIONS_OUTPUT_BUCKET: !Ref TranscriptionsBucket
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt TranscriptionJobStartFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: serverless-transcribe
      Timeout: 8
  TranscriptionJobStartFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: MediaBucketReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-${MediaBucketIdentifier}"
                  - !Sub "arn:aws:s3:::${AWS::StackName}-${MediaBucketIdentifier}/*"
        - PolicyName: TranscriptionsBucketWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                Resource:
                  - !GetAtt TranscriptionsBucket.Arn
                  - !Sub "${TranscriptionsBucket.Arn}/*"
        - PolicyName: Transcribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:GetTranscriptionJob
                  - transcribe:StartTranscriptionJob
                Resource:
                  - "*"
        - PolicyName: SESSendEmail
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource:
                  - "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  # Transcription Job Events
  TranscriptionJobStateChangeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub "${StackResourcesPrefix}/lambdas/TranscriptionJobStateChangeFunction.zip"
        S3ObjectVersion: !Ref TranscriptionJobStateChangeFunctionS3ObjectVersion
      Description: Handles transcription job state change events
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Ref MediaBucket
          NOTIFICATION_SOURCE_EMAIL_ADDRESS: !Ref NotificationSourceEmailAddress
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt TranscriptionJobStateChangeFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: serverless-transcribe
      Timeout: 16
  TranscriptionJobStateChangeFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: MediaBucketReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "${MediaBucket.Arn}/*"
        - PolicyName: TranscriptionsBucketReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "${TranscriptionsBucket.Arn}/*"
        - PolicyName: Transcribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:GetTranscriptionJob
                Resource:
                  - "*"
        - PolicyName: SESSendEmail
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource:
                  - "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  TranscriptionJobEventsRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TranscriptionJobStateChangeFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TranscriptionJobEventsRule.Arn
  TranscriptionJobEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors Amazon Transcribe for job state changes
      EventPattern: |
        {
          "source": [
            "aws.transcribe"
          ],
          "detail-type": [
            "Transcribe Job State Change"
          ],
          "detail": {
            "TranscriptionJobStatus": [
              "COMPLETED",
              "FAILED"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt TranscriptionJobStateChangeFunction.Arn
          Id: !Sub "${AWS::StackName}.Transcribe.JobState"
  # Website API
  WebsiteApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub "${StackResourcesPrefix}/lambdas/WebsiteApiFunction.zip"
        S3ObjectVersion: !Ref WebsiteApiFunctionS3ObjectVersion
      Description: >
        Provides a simple API for browser-based S3 uploading
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          MEDIA_BUCKET_DOMAIN_NAME: !GetAtt MediaBucket.RegionalDomainName
          UPLOAD_ACCESS_KEY_ID: !Ref MediaBucketAccessIamUserAccessKey
          UPLOAD_SECRET_ACCESS_KEY: !GetAtt MediaBucketAccessIamUserAccessKey.SecretAccessKey
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt WebsiteApiFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: serverless-transcribe
      Timeout: 3
  WebsiteApiFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WebsiteApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      Description: Transcription website API
  WebsiteApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: omega
      RestApiId: !Ref WebsiteApi
      DeploymentId: !Ref WebsiteApiDeployment
  WebsiteApiDeployment:
    DependsOn:
      - WebsiteApiBrowserBasedUploadMethod
      - StaticWebsiteMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WebsiteApi
  WebsiteApiUnauthorizedGatewayReponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.WWW-Authenticate: "'Basic'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref WebsiteApi
      StatusCode: "401"
  WebsiteApiV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebsiteApi
      ParentId: !GetAtt WebsiteApi.RootResourceId
      PathPart: v1
  WebsiteApiBrowserBasedUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebsiteApi
      ParentId: !Ref WebsiteApiV1Resource
      PathPart: browser-based-upload
  WebsiteApiBrowserBasedUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebsiteApi
      ResourceId: !Ref WebsiteApiBrowserBasedUploadResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsiteApiFunction.Arn}/invocations
  WebsiteApiBrowserBasedUploadMethodInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebsiteApiFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsiteApi}/${WebsiteApiStage}/*"
  # Static Website
  StaticWebsiteFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub "${StackResourcesPrefix}/lambdas/StaticWebsiteFunction.zip"
        S3ObjectVersion: !Ref StaticWebsiteFunctionS3ObjectVersion
      Description: >
        Generates a basic front end for uploading files to S3
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt StaticWebsiteFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: serverless-transcribe
      Timeout: 3
  StaticWebsiteFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  StaticWebsiteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebsiteApi
      ParentId: !GetAtt WebsiteApi.RootResourceId
      PathPart: upload
  StaticWebsiteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaticWebsiteAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StaticWebsiteFunction.Arn}/invocations
      ResourceId: !Ref StaticWebsiteResource
      RestApiId: !Ref WebsiteApi
  StaticWebsiteMethodInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StaticWebsiteFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsiteApi}/${WebsiteApiStage}/*"
  StaticWebsiteAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref StackResourcesBucket
        S3Key: !Sub "${StackResourcesPrefix}/lambdas/StaticWebsiteAuthorizerFunction.zip"
        S3ObjectVersion: !Ref StaticWebsiteAuthorizerFunctionS3ObjectVersion
      Description: >
        Authorizer for S3 file upload front end
      Environment:
        Variables:
          BASIC_AUTH_USERNAME: !Ref BasicAuthUsername
          BASIC_AUTH_PASSWORD: !Ref BasicAuthPassword
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt StaticWebsiteAuthorizerFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: serverless-transcribe
      Timeout: 3
  StaticWebsiteAuthorizerFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  StaticWebsiteAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt StaticWebsiteAuthorizerIamRole.Arn
      AuthorizerResultTtlInSeconds: 600
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StaticWebsiteAuthorizerFunction.Arn}/invocations
      IdentitySource: method.request.header.Authorization
      Name: !Sub ${AWS::StackName}_static_website_authorizer
      RestApiId: !Ref WebsiteApi
      Type: REQUEST
  StaticWebsiteAuthorizerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AuthorizerLambdaInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:invokeFunction
                Resource:
                  - !GetAtt StaticWebsiteAuthorizerFunction.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
Outputs:
  UploadWebpageUrl:
    Description: The URL for the webpage used to upload media
    Value: !Sub "https://${WebsiteApi}.execute-api.${AWS::Region}.amazonaws.com/${WebsiteApiStage}/upload"
